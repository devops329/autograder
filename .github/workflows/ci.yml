name: Deploy

on:
  push:
    branches:
      - main
jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Create build folder
        run: mkdir build

      - name: Write config file
        run: |
          echo "
          export const config = {
            app: {
              host: 'https://cs329.cs.byu.edu',
            },
            db: {
              connection: {
                host: 'localhost',
                user: '${{ secrets.DB_USER }}',
                password: '${{ secrets.DB_PASSWORD }}',
                database: 'autograder',
                connectTimeout: 60000,
              },
            },
            canvas: {
              token: '${{ secrets.CANVAS_AUTHTOKEN }}',
              base_url:'https://byu.instructure.com/api/v1/courses/26459',
            },
            pizza_factory: {
              url: 'https://pizza-factory.cs329.click',
              authtoken: '${{ secrets.PIZZA_FACTORY_AUTHTOKEN }}',
            },
            github: {
              personal_access_token: '${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}',
            },
            logging: {
              source: 'autograder',
              url: 'https://logs-prod-006.grafana.net/loki/api/v1/push',
              userId: '${{ secrets.GRAFANA_USER_ID }}',
              apiKey: '${{ secrets.GRAFANA_API_KEY }}',
            },
          };
          " > backend/config.ts

      - name: Build and copy the backend
        run: |
          cd backend
          npm ci
          npm run build
          cp -r dist/* ../build
          openssl genrsa -out ../build/certs/sp.key 2048
          cp package.json ../build
          rm -rf dist
          cd ../

      - name: Build and copy the frontend
        run: |
          cd frontend
          npm ci
          npm run build
          cp -rf dist ../build/public
          rm -rf dist
          cd ../

      - name: Write private key file
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: SSH to EC2 and clear out previous distribution
        run: ssh -i ec2_key.pem ubuntu@cs329.click "rm -rf services/grade && mkdir -p services/grade"

      - name: Copy the build to EC2
        run: |
          scp -i ec2_key.pem -r build/* ubuntu@cs329.click:services/grade

      - name: SSH to EC2 and start the service
        run: |
          ssh -i ec2_key.pem ubuntu@cs329.click << ENDSSH
          cd services/grade
          npm install
          pm2 start ecosystem.config.js
          ENDSSH
